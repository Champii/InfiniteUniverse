// Generated by LiveScript 1.5.0
(function(){
  var formulas, Planet, Entity, Research, Building, Mine, SolarPlant, specialBuildings, out$ = typeof exports != 'undefined' && exports || this;
  import$(global, require('prelude-ls'));
  formulas = require('./formulas');
  out$.Planet = Planet = (function(){
    Planet.displayName = 'Planet';
    var prototype = Planet.prototype, constructor = Planet;
    function Planet(planet, player){
      var buildingLevels, researchLevels, this$ = this;
      this.buildings = {};
      this.researches = {};
      this.amount = planet.amount;
      buildingLevels = planet.buildings.ToJSON();
      researchLevels = player.researches.ToJSON();
      this.prodRatio = this._prodRatio();
      each(function(it){
        var type, that;
        type = (that = specialBuildings[it[0]]) ? that : Building;
        return this$.buildings[it[0]] = new type(it[0], it[1], this$);
      })(
      objToPairs(
      buildingLevels));
      each(function(it){
        return this$.researches[it[0]] = new Research(it[0], it[1], this$);
      })(
      objToPairs(
      researchLevels));
      Obj.each(function(it){
        return it._init();
      })(
      this.buildings);
      Obj.each(function(it){
        return it._init();
      })(
      this.researches);
      this.prodRatio = this._prodRatio();
    }
    Planet.prototype._availableEnergy = function(){
      return this.buildings.solarplant.energy - this.buildings.metal.consumption - this.buildings.crystal.consumption - this.buildings.deut.consumption;
    };
    Planet.prototype._prodRatio = function(){
      var ref$, consumption;
      if (((ref$ = this.buildings) != null ? ref$.solarplant : void 8) == null) {
        return 0;
      }
      if (this.buildings.solarplant.energy === 0) {
        return 0;
      }
      if (this._availableEnergy() >= 0) {
        return 1;
      }
      consumption = this.buildings.metal.consumption + this.buildings.crystal.consumption + this.buildings.deut.consumption;
      return this.buildings.solarplant.energy / consumption;
    };
    Planet.prototype.update = function(){
      this.prodRatio = this._prodRatio();
      this.buildings.metal.update();
      this.buildings.crystal.update();
      return this.buildings.deut.update();
    };
    Planet.prototype.buy = function(price){
      if (this.amount.metal < price.metal || this.amount.crystal < price.crystal || this.amount.deut < (price.deut || 0)) {
        return false;
      }
      this.amount.metal -= price.metal;
      this.amount.crystal -= price.crystal;
      if (price.deut) {
        this.amount.deut -= price.deut;
      }
      return true;
    };
    return Planet;
  }());
  Entity = (function(){
    Entity.displayName = 'Entity';
    var prototype = Entity.prototype, constructor = Entity;
    function Entity(name, level, planet){
      this.name = name;
      this.level = level;
      this.planet = planet;
      this.price = this._price();
    }
    Entity.prototype._init = function(){
      this.available = this._availability();
      return this.buildingTime = this._buildingTime();
    };
    Entity.prototype._buildingTime = function(){
      return Math.floor(((this.price.metal * this.price.crystal) / (25000 * (1 + this.planet.buildings.roboticfactory.level) * Math.pow(2, 0) * 1)) * 3600 / 10);
    };
    Entity.prototype._price = function(){
      return formulas[this.name].price(this.level);
    };
    Entity.prototype._availability = function(){
      var allBuildings, allResearches, this$ = this;
      allBuildings = all(function(it){
        return this$.planet.buildings[it[0]].level >= it[1];
      })(
      objToPairs(
      formulas[this.name].buildings));
      allResearches = all(function(it){
        return this$.planet.researches[it[0]].level >= it[1];
      })(
      objToPairs(
      formulas[this.name].researches));
      return allBuildings && allResearches;
    };
    return Entity;
  }());
  Research = (function(superclass){
    var prototype = extend$((import$(Research, superclass).displayName = 'Research', Research), superclass).prototype, constructor = Research;
    Research.prototype._buildingTime = function(){
      return (this.price.metal + this.price.crystal) / (1000 * (this.planet.buildings.lab.level + 1)) * 3600;
    };
    function Research(){
      Research.superclass.apply(this, arguments);
    }
    return Research;
  }(Entity));
  Building = (function(superclass){
    var prototype = extend$((import$(Building, superclass).displayName = 'Building', Building), superclass).prototype, constructor = Building;
    function Building(){
      Building.superclass.apply(this, arguments);
    }
    return Building;
  }(Entity));
  Mine = (function(superclass){
    var prototype = extend$((import$(Mine, superclass).displayName = 'Mine', Mine), superclass).prototype, constructor = Mine;
    function Mine(){
      Mine.superclass.apply(this, arguments);
      this.production = formulas[this.name].production(this.level) * this.planet.prodRatio;
      this.consumption = formulas[this.name].consumption(this.level);
      this.lastUpdate = new Date;
    }
    Mine.prototype.update = function(){
      var lapsedTime;
      this.production = formulas[this.name].production(this.level) * this.planet.prodRatio;
      this.consumption = formulas[this.name].consumption(this.level);
      lapsedTime = (new Date - this.lastUpdate) / 1000;
      this.planet.amount[this.name] += (this.production / 3600) * lapsedTime;
      return this.lastUpdate = new Date;
    };
    return Mine;
  }(Building));
  SolarPlant = (function(superclass){
    var prototype = extend$((import$(SolarPlant, superclass).displayName = 'SolarPlant', SolarPlant), superclass).prototype, constructor = SolarPlant;
    function SolarPlant(){
      SolarPlant.superclass.apply(this, arguments);
      this.energy = formulas.solarplant.production(this.level);
    }
    return SolarPlant;
  }(Building));
  specialBuildings = {
    metal: Mine,
    crystal: Mine,
    deut: Mine,
    solarplant: SolarPlant
  };
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
}).call(this);
